# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Frontend CI

on:
  pull_request:
    branches: [ "main" ]

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.filter.outputs.frontend }}
    steps:
      - uses: actions/checkout@v4
      - name: Detect frontend changes
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            frontend:
              - 'frontend/**'
  skip-if-no-changes:
    runs-on: ubuntu-latest
    name: No changes detected
    needs: detect-changes
    if: needs.detect-changes.outputs.changed == 'false'
    steps:
      - run: echo "No changes detected, skipping frontend pipeline"
      
  lint:
    runs-on: ubuntu-latest
    name: Lint
    needs: detect-changes
    if: needs.detect-changes.outputs.changed == 'true'
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/package-lock.json
      - run: npm ci
      - name: Lint code
        run: npm run lint --if-present
        
  build:
    runs-on: ubuntu-latest
    name: Build
    needs: detect-changes
    if: needs.detect-changes.outputs.changed == 'true'
    defaults:
      run:
        working-directory: frontend

    strategy:
      matrix:
        node-version: [20.x]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    # restore dependencies only if package-lock.json changed
    - name: Install dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      run: npm ci
     
    - name: Build app
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist
        retention-days: 1
        
  test:
    runs-on: ubuntu-latest
    name: Tests
    needs: [ build, detect-changes ]
    if: needs.detect-changes.outputs.changed == 'true'
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/package-lock.json
      - run: npm ci
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist
      
      - name: Run tests
        run: npm test --if-present
  # Ensure that the app can actually start
  smoke:
    runs-on: ubuntu-latest
    name: Run smoke test
    needs: [ build, detect-changes ]
    if: needs.detect-changes.outputs.changed == 'true'
    defaults:
      run:
        working-directory: frontend
        
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/package-lock.json
      - run: npm ci
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist
      - name: Run smoke test
        run: |
          npm run preview &
          sleep 5
          curl -f http://localhost:4173 || exit 1
    
